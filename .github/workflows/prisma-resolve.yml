name: Prisma Resolve

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  resolve:
    runs-on: ubuntu-latest

    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Resolve pending migrations
      run: |
        echo "Resolving migrations for ${{ github.event.inputs.environment }}"
        npx prisma migrate resolve --applied $(ls prisma/migrations | tail -1 | cut -d'_' -f1)

    - name: Mark migration as applied
      run: |
        echo "Migration marked as applied in ${{ github.event.inputs.environment }}"
        npx prisma migrate status

    - name: Create deployment notification
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Migration Resolved**\n\nâœ… Migration applied to **${{ github.event.inputs.environment }}**\nâœ… Database schema synchronized\nâœ… Ready for deployment\n\nEnvironment: ${{ github.event.inputs.environment }}\nTimestamp: ${new Date().toISOString()}`
          })
